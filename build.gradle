buildscript {
    repositories {
        mavenLocal()
        maven { url "https://repo.grails.org/grails/core" }
    }    
    
    dependencies {
        classpath "org.grails:grails-gradle-plugin:$grailsVersion"
        classpath "org.grails:grails-docs:$grailsVersion"
        classpath 'com.jfrog.bintray.gradle:gradle-bintray-plugin:1.8.5'
        classpath 'com.bmuschko:gradle-nexus-plugin:2.3.1'
        classpath 'io.github.groovylang.groovydoc:groovydoc-gradle-plugin:1.0.1'
        classpath "io.micronaut.docs:micronaut-docs-asciidoc-extensions:$micronautDocsVersion"
        classpath "io.micronaut.docs:micronaut-docs-gradle-plugins:$micronautDocsVersion"
    }
}

plugins {
    id "com.github.hierynomus.license" version "0.16.1" apply false
}

repositories {
    mavenLocal()
    mavenCentral()
    maven { url "https://repo.grails.org/grails/core" }
}

version project.projectVersion

ext {
    distInstallDir = file("$buildDir/dist-tmp")
    homeBinDir = file("bin")
    homeLibDir = file("lib")
    homeSrcDir = file("src")
}

subprojects {Project subproject ->

    version project.projectVersion
    group "io.micronaut.configuration"

    ext {
        isConfiguration = subproject.projectDir.parentFile.name == 'configurations'
        isBuildSnapshot = version.toString().endsWith("-SNAPSHOT")
    }
    
    repositories {
        mavenLocal()
        maven { url "https://repo.grails.org/grails/core" }
        maven { url "http://oss.sonatype.org/content/repositories/snapshots/" }
        maven { url 'https://files.couchbase.com/maven2' }
    }
    
    if (subproject.parent.name == "docs-examples" || subproject.name == "docs-examples") {
        return
    }

    apply plugin: "groovy"
    apply plugin: "java"
    apply plugin: "io.spring.dependency-management"
    
    dependencyManagement {
        imports {
            mavenBom "io.micronaut:micronaut-bom:${micronautVersion}"
        }
    }

    sourceCompatibility = "1.8"
    targetCompatibility = "1.8"

    jar {
        manifest {
            attributes('Automatic-Module-Name': "${subproject.group}.${subproject.name}".replaceAll('[^\\w\\.\\$_]', "_"))
            attributes('Implementation-Version': projectVersion)
            attributes('Implementation-Title': 'Micronaut Couchbase Configuration')
        }
    }

    tasks.withType(Test) {
        jvmArgs '-Duser.country=US'
        jvmArgs '-Duser.language=en'
        testLogging {
            exceptionFormat = 'full'
        }
        afterSuite {
            System.out.print(".")
            System.out.flush()
        }

        reports.html.enabled = !System.getenv("TRAVIS")
        reports.junitXml.enabled = !System.getenv("TRAVIS")
    }

    configurations {
        documentation
        all {
            resolutionStrategy.eachDependency { DependencyResolveDetails details ->
                String group = details.requested.group
                if(group == 'org.codehaus.groovy') {
                    details.useVersion(groovyVersion)
                }
                if(group == 'org.ow2.asm') {
                    details.useVersion(asmVersion)
                }
            }
        }
    }

    dependencies {
        documentation "org.codehaus.groovy:groovy-templates:$groovyVersion"
        documentation "org.codehaus.groovy:groovy-dateutil:$groovyVersion"
        testImplementation "cglib:cglib-nodep:3.3.0"
        testImplementation "org.objenesis:objenesis:3.3"
        testImplementation("org.spockframework:spock-core:${spockVersion}") {
            exclude module:'groovy-all'
        }
        testImplementation "io.micronaut.test:micronaut-test-spock:$micronautTestVersion"
        testImplementation "org.codehaus.groovy:groovy-test:$groovyVersion"
        testRuntimeOnly "ch.qos.logback:logback-classic:1.4.1"
        implementation "org.slf4j:slf4j-api:2.0.6"
    }

    groovydoc.classpath += project.configurations.documentation

    task allDeps(type: DependencyReportTask) {}

}

allprojects {
    apply plugin: "idea"

    idea {
        module {
            outputDir file('build/classes/java/main')
            testOutputDir file('build/classes/groovy/test')
        }
    }
}
